# -*- coding: utf-8 -*-
"""Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPQnvERPEebpAtf3tWd27UVq65t4zy75
"""

import tensorflow as tf
import random 
import json
import numpy as np
import matplotlib.pyplot as plt
import os
import tempfile

#import Fashion MNIST data using Keras
(X_train,y_train),(X_test,y_test) = tf.keras.datasets.fashion_mnist.load_data()

#Data Normalization between 0 and 1
X_train = X_train / 255.0
X_test = X_test / 255.0

X_train.shape

X_test.shape

"""**Reshaping training data to be = (60000,28,28,1) instead of (60000, 28, 28)**"""

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)

X_train.shape

X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

X_test.shape

class_names = ['T-shirt/top', 'Trouser', 'Pullover','Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

len(X_train)

W_grid = 4
L_grid = 4

fig, axes = plt.subplots(L_grid, W_grid, figsize = (15,15))

n_training = len(X_train)

for i in np.arange(0, L_grid * W_grid):
    index = np.random.randint(0, n_training)
    axes[i].imshow(X_train[index].reshape(28,28))
    axes[i].set_title(y_train[index])
    axes[i].axis('off')

plt.subplots_adjust(hspace=0.4)

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(32,(3,3), activation='relu', input_shape = (28,28,1)))
cnn.add(tf.keras.layers.MaxPool2D(2,2))

cnn.add(tf.keras.layers.Conv2D(64,(3,3), activation='relu'))

cnn.add(tf.keras.layers.Flatten()) 

cnn.add(tf.keras.layers.Dense(64, activation='relu'))
cnn.add(tf.keras.layers.Dense(10, activation='softmax'))
cnn.summary()

epochs = 5

cnn.compile(optimizer='Adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=epochs)

test_loss, test_acc = cnn.evaluate(X_test,y_test)
print('\nTest accuracy: {}'.format(test_acc))

Model_Directory = tempfile.gettempdir()

Model_Directory

version = 1

export_path = os.path.join(Model_Directory, str(version))
print('export_path = {}\n'.format(export_path))

if os.path.isdir(export_path):
    print('\nAlready saved a model, cleaning up.\n')
    !rm -r {export_path}

tf.saved_model.save(
    tf.distribute.Strategy,
    export_path,
    input = {'input_image': cnn.input}, 
    outputs = {i.name:i for i in cnn.outputs}
)

!echo "deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" | sudo tee /etc/apt/sources.list.d/tensorflow-serving.list && \
curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | sudo apt-key add -
!apt update

!apt-get install tensor-flow-model-server

os.environ["MODEL_DIR"] = Model_Directory

# Commented out IPython magic to ensure Python compatibility.
# %%bash --bg 
# nohup tensorflow_model_server \ 
#     --rest_api_port = 8501 \ 
#     --model_name = fashion_mnist_model \ 
#     #--MODEL_DIR = "${MODEL_DIR}" > server.log 2>&1

!tail server.log

def show(idx, title):
    plt.figure()
    plt.imshow(X_test[idx].reshape(28,28))
    plt.title('\n\n{}'.format(title), fontdict={'size':15})

rando = random.randint(0,len(X_test)-1)
show(rando, 'An Example Image: {}'.format(class_names[y_test[rando]]))

#Lets create a JSON object and make 3 inference requests 
 data = json.dumps({"signature_name":"serving_default", "instances":X_test[0:3].tolist()})
 print('Data: {}'.format(data[:50], data[len(data)-52:]))

!pip install -q requests

import requests

headers = {"content-type":"application/json"}
json_response = requests.post('http://localhost:8501/v1/models/fashion_model:predict', data=data, headers=headers)
predictions = json.loads(json_response.text)['predictions']

show(0, 'the model thought this was a {} (class{}), and it was actually a {} (class {})'. format(class_names[np.argmax(predictions[0])], y_test[0], class_names[np.argmax(predictions[0])], y_test[0]))

headers = {"content-type": "application/json"}
json_response = requests.post('http://localhost:8501/v1/models/fashion_models/version/1:predict', data=data, headers=headers)
predictions = json.loads(json_response.text)['predictions']

for i in range(0,3):
    show(i, 'the model shows this as a {} (class{}), and this was actually a {} (class{})'.format(
        class_names[np.argmax(predictions[i])], y_test[i], class_names[np.argmax(predictions[i])], y_test[i]))

